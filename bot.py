
# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import logging
import time
from typing import Optional, Union, List, Dict, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import re

import gspread
import telegram
from oauth2client.service_account import ServiceAccountCredentials
from gspread import Client
from telegram import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    MessageHandler,
    filters,
)

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class ContentType(Enum):
    TEXT = "text"
    PHONE = "phone" 
    MENU = "menu"
    SUBMENU = "submenu"
    LINK = "link"
    EMAIL = "email"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã Google Sheets
class SheetColumns:
    CALLBACK_DATA = 0  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback_data
    PARENT = 1         # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –º–µ–Ω—é
    TEXT = 2           # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    DATA = 3           # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω—ã, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.)
    TYPE = 4           # –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (menu, submenu, text, link –∏ —Ç.–¥.)
    EXTRA = 5          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

@dataclass
class MenuItem:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""
    callback_data: str
    parent: str
    text: str
    data: str = ""
    content_type: ContentType = ContentType.TEXT
    extra: str = ""
    
    @classmethod
    def from_row(cls, row: List[str]) -> Optional['MenuItem']:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç MenuItem –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        if len(row) < 3:
            return None
            
        callback_data = row[0].strip()
        parent = row[1].strip()
        text = row[2].strip()
        
        if not callback_data or not text:
            return None
            
        data = row[3].strip() if len(row) > 3 else ""
        content_type_str = row[4].strip() if len(row) > 4 else "text"
        extra = row[5].strip() if len(row) > 5 else ""
        
        try:
            content_type = ContentType(content_type_str)
        except ValueError:
            content_type = ContentType.TEXT
            
        return cls(
            callback_data=callback_data,
            parent=parent,
            text=text,
            data=data,
            content_type=content_type,
            extra=extra
        )

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TOKEN = " " 
    CREDS_FILE = " "
    SHEET_ID = " "
    CACHE_DURATION = 3600  # 1 —á–∞—Å
    MAX_SEARCH_RESULTS = 5
    MAX_MESSAGE_LENGTH = 4000
    
    # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    CONTACTS_BUTTON = "üìû –í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
    MENU_BUTTON = "üìã –ú–µ–Ω—é"
    HELP_BUTTON = "‚ùì –ü–æ–º–æ—â—å"
    REFRESH_BUTTON = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DataCache:
    """–ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Google Sheets"""
    
    def __init__(self, cache_duration: int = Config.CACHE_DURATION):
        self.cache_duration = cache_duration
        self.last_update: Optional[float] = None
        self.data: List[MenuItem] = []
        
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –∫—ç—à"""
        return (self.last_update is not None and 
                time.time() - self.last_update < self.cache_duration)
    
    def update(self, data: List[MenuItem]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à"""
        self.data = data
        self.last_update = time.time()
        
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
        self.data = []
        self.last_update = None

class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, creds_file: str, sheet_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            creds_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Service Account
            sheet_id: ID Google-—Ç–∞–±–ª–∏—Ü—ã
        """
        if not creds_file:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å creds_file")
        if not sheet_id:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å sheet_id")
            
        self.creds_file = creds_file
        self.sheet_id = sheet_id
        self._client = None
        
    async def _get_client(self) -> Client:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Google Sheets"""
        if self._client is None:
            try:
                scope = [
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/drive"
                ]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    self.creds_file, scope
                )
                self._client = gspread.authorize(creds)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets: {e}")
                raise
        return self._client
        
    async def fetch_data(self) -> List[MenuItem]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
        try:
            client = await self._get_client()
            sheet = client.open_by_key(self.sheet_id).sheet1
            raw_data = sheet.get_all_values()
            
            menu_items = []
            for row in raw_data[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if not row or not any(cell.strip() for cell in row):
                    continue
                    
                item = MenuItem.from_row(row)
                if item:
                    menu_items.append(item)
                    
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(menu_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é")
            return menu_items
            
        except gspread.SpreadsheetNotFound:
            logger.error(f"–¢–∞–±–ª–∏—Ü–∞ —Å ID {self.sheet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise
        except gspread.APIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Google API: {e}")
            raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def update_data(self, data: List[List[str]]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        try:
            client = await self._get_client()
            sheet = client.open_by_key(self.sheet_id).sheet1
            sheet.clear()
            sheet.append_rows(data)
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def format_phone(text: str, phone: str, extra: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"""
        formatted_phone = re.sub(r'\D', '', phone)
        if formatted_phone.startswith('8'):
            formatted_phone = '7' + formatted_phone[1:]
        
        message = f"{text}\n\nüìû <a href='tel:+{formatted_phone}'>{phone}</a>"
        
        if extra:
            message += f"\n\nüí° {extra}"
            
        return message
    
    @staticmethod
    def format_text(text: str, data: str = "", extra: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        message = text
        
        if data:
            message += f"\n\n{data}"
            
        if extra:
            message += f"\n\nüí° {extra}"
            
        return message
    
    @staticmethod
    def format_link(text: str, url: str, extra: str = "") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π"""
        message = f"{text}\n\nüîó <a href='{url}'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>"
        
        if extra:
            message += f"\n\nüí° {extra}"
            
        return message
    
    @staticmethod
    def truncate_message(message: str, max_length: int = Config.MAX_MESSAGE_LENGTH) -> str:
        """–û–±—Ä–µ–∑–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(message) <= max_length:
            return message
        return message[:max_length - 3] + "..."

class NavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    
    @staticmethod
    def get_nav_stack(context: CallbackContext) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        return context.user_data.get('nav_stack', [])
    
    @staticmethod
    def push_to_nav_stack(context: CallbackContext, item_id: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if 'nav_stack' not in context.user_data:
            context.user_data['nav_stack'] = []
        context.user_data['nav_stack'].append(item_id)
    
    @staticmethod
    def pop_from_nav_stack(context: CallbackContext) -> Optional[str]:
        """–£–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–µ–∫–∞"""
        nav_stack = NavigationManager.get_nav_stack(context)
        return nav_stack.pop() if nav_stack else None
    
    @staticmethod
    def clear_nav_stack(context: CallbackContext) -> None:
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        context.user_data['nav_stack'] = []

class ClinicBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –∫–ª–∏–Ω–∏–∫–∏"""
    
    def __init__(self, token: str, creds_file: str, sheet_id: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.cache = DataCache()
        self.sheets_manager = GoogleSheetsManager(creds_file, sheet_id)
        self.formatter = MessageFormatter()
        self.nav_manager = NavigationManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message)
        )
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
    async def get_menu_data(self, force_refresh: bool = False) -> List[MenuItem]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if force_refresh or not self.cache.is_valid():
            logger.info("–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
            data = await self.sheets_manager.fetch_data()
            self.cache.update(data)
        
        return self.cache.data
    
    async def start_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.message or not update.effective_user:
            return
            
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "üè• –≠—Ç–æ –±–æ—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–ª–∏–Ω–∏–∫–∏.\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
            "‚Ä¢ üì± –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º\n"
            "‚Ä¢ üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
        )
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [Config.MENU_BUTTON, Config.CONTACTS_BUTTON],
                ["üíª –ï–ú–ò–ê–°", "üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π"],
                [ Config.HELP_BUTTON]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
        )
        
        await self._safe_send_message(
            chat_id=update.message.chat_id,
            text=welcome_text,
            reply_markup=keyboard
        )
    
    async def help_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not update.message:
            return
            
        help_text = (
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "üîç <b>–ü–æ–∏—Å–∫:</b>\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É\n\n"
            "üìã <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n\n"
            "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞\n\n"
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b>\n"
            "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å"
        )
        
        await self._safe_send_message(
            chat_id=update.message.chat_id,
            text=help_text,
            parse_mode="HTML"
        )
    
    async def menu_command(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
        if not update.message:
            return
            
        self.nav_manager.clear_nav_stack(context)
        sent_message = await update.message.reply_text("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        await self._show_main_menu(sent_message)
    
    async def handle_text_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
            
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if text == Config.MENU_BUTTON:
            await self.menu_command(update, context)
            return
        elif text == Config.CONTACTS_BUTTON:
            await self._show_contacts(update)
            return
        elif text == Config.HELP_BUTTON:
            await self.help_command(update, context)
            return
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        await self._handle_search(update, text)
    
    async def handle_callback_query(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        if not query:
            return
            
        await query.answer()
        
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if query.data == "back":
                await self._handle_back_button(query, context)
                return
            elif query.data == "refresh":
                await self._handle_refresh(query, context)
                return
            elif query.data == "main_menu":
                self.nav_manager.clear_nav_stack(context)
                await self._show_main_menu(query.message)
                return
            
            # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
            menu_data = await self.get_menu_data()
            item = self._find_menu_item(menu_data, query.data)
            
            if not item:
                await self._show_error(query.message, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            self.nav_manager.push_to_nav_stack(context, item.callback_data)
            await self._show_item_content(query.message, item, menu_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}", exc_info=True)
            await self._show_error(query.message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def _show_item_content(self, message: Message, item: MenuItem, menu_data: List[MenuItem]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é"""
        if item.content_type == ContentType.MENU:
            await self._show_menu(message, item, menu_data, is_main=True)
        elif item.content_type == ContentType.SUBMENU:
            await self._show_menu(message, item, menu_data, is_main=False)
        elif item.content_type == ContentType.PHONE:
            await self._show_phone_content(message, item)
        elif item.content_type == ContentType.LINK:
            await self._show_link_content(message, item)
        else:
            await self._show_text_content(message, item)
    
    async def _show_menu(self, message: Message, parent_item: MenuItem, menu_data: List[MenuItem], is_main: bool = False) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–ª–∏ –ø–æ–¥–º–µ–Ω—é"""
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        children = [
            item for item in menu_data 
            if item.parent == parent_item.callback_data
        ]
        
        if not children:
            await self._show_text_content(message, parent_item)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for child in children:
            keyboard.append([InlineKeyboardButton(
                child.text,
                callback_data=child.callback_data
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if not is_main:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
        nav_buttons.append(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        nav_buttons.append(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        text = parent_item.text
        if parent_item.data:
            text += f"\n\n{parent_item.data}"
        
        await self._safe_edit_message(
            message=message,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def _show_phone_content(self, message: Message, item: MenuItem) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º"""
        formatted_text = self.formatter.format_phone(item.text, item.data, item.extra)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self._safe_edit_message(
            message=message,
            text=formatted_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def _show_link_content(self, message: Message, item: MenuItem) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å—Å—ã–ª–∫–æ–π"""
        formatted_text = self.formatter.format_link(item.text, item.data, item.extra)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self._safe_edit_message(
            message=message,
            text=formatted_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    async def _show_text_content(self, message: Message, item: MenuItem) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        formatted_text = self.formatter.format_text(item.text, item.data, item.extra)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await self._safe_edit_message(
            message=message,
            text=formatted_text,
            reply_markup=keyboard
        )
    
    async def _show_main_menu(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        menu_data = await self.get_menu_data()
        main_items = [item for item in menu_data if not item.parent]
        
        if not main_items:
            await self._show_error(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            return
        
        keyboard = []
        for item in main_items:
            keyboard.append([InlineKeyboardButton(
                item.text,
                callback_data=item.callback_data
            )])
        
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh")])
        
        await self._safe_edit_message(
            message=message,
            text="üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    
    async def _show_contacts(self, update: Update) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
        menu_data = await self.get_menu_data()
        contacts_item = self._find_menu_item(menu_data, "main_contacts")
        
        if contacts_item:
            sent_message = await update.message.reply_text("üìû –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã...")
            await self._show_item_content(sent_message, contacts_item, menu_data)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def _handle_search(self, update: Update, search_text: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        if not search_text or len(search_text) < 2:
            await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        menu_data = await self.get_menu_data()
        results = self._search_items(menu_data, search_text)
        
        if not results:
            await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {search_text}\n\n"
        
        for i, item in enumerate(results[:Config.MAX_SEARCH_RESULTS], 1):
            response_text += f"{i}. <b>{item.text}</b>\n"
            if item.data:
                preview = item.data[:100]
                if len(item.data) > 100:
                    preview += "..."
                response_text += f"   {preview}\n"
            response_text += "\n"
        
        if len(results) > Config.MAX_SEARCH_RESULTS:
            response_text += f"... –∏ –µ—â–µ {len(results) - Config.MAX_SEARCH_RESULTS} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        keyboard = []
        for item in results[:Config.MAX_SEARCH_RESULTS]:
            keyboard.append([InlineKeyboardButton(
                f"üìÑ {item.text}",
                callback_data=item.callback_data
            )])
        
        await self._safe_send_message(
            chat_id=update.message.chat_id,
            text=self.formatter.truncate_message(response_text),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    
    def _search_items(self, items: List[MenuItem], search_text: str) -> List[MenuItem]:
        """–ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É"""
        search_lower = search_text.lower()
        results = []
        
        for item in items:
            # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ
            if search_lower in item.text.lower():
                results.append(item)
            # –ü–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö
            elif search_lower in item.data.lower():
                results.append(item)
            # –ü–æ–∏—Å–∫ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            elif search_lower in item.extra.lower():
                results.append(item)
        
        return results
    
    def _find_menu_item(self, items: List[MenuItem], callback_data: str) -> Optional[MenuItem]:
        """–ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –ø–æ callback_data"""
        return next((item for item in items if item.callback_data == callback_data), None)
    
    async def _handle_back_button(self, query: CallbackQuery, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
        nav_stack = self.nav_manager.get_nav_stack(context)
        
        if len(nav_stack) < 2:
            await self._show_main_menu(query.message)
            return
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        self.nav_manager.pop_from_nav_stack(context)
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        previous_id = nav_stack[-1] if nav_stack else None
        
        if previous_id:
            menu_data = await self.get_menu_data()
            previous_item = self._find_menu_item(menu_data, previous_id)
            
            if previous_item:
                await self._show_item_content(query.message, previous_item, menu_data)
            else:
                await self._show_main_menu(query.message)
        else:
            await self._show_main_menu(query.message)
    
    async def _handle_refresh(self, query: CallbackQuery, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        self.cache.clear()
        await self.get_menu_data(force_refresh=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.nav_manager.clear_nav_stack(context)
        await self._show_main_menu(query.message)
    
    async def _show_error(self, message: Message, error_text: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")]
        ])
        
        await self._safe_edit_message(
            message=message,
            text=f"‚ö†Ô∏è {error_text}",
            reply_markup=keyboard
        )
    
    async def _safe_send_message(
        self,
        chat_id: int,
        text: str,
        reply_markup=None,
        parse_mode=None,
        disable_web_page_preview=True
    ) -> Optional[Message]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            return await self.application.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
        except telegram.error.RetryAfter as e:
            logger.warning(f"Rate limit. Retry after {e.retry_after} seconds")
            await asyncio.sleep(e.retry_after)
            return await self._safe_send_message(chat_id, text, reply_markup, parse_mode, disable_web_page_preview)
        except telegram.error.TelegramError as e:
            logger.error(f"Telegram API error: {e}")
            return None
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return None
    
    async def _safe_edit_message(
        self,
        message: Message,
        text: str,
        reply_markup=None,
        parse_mode=None
    ) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if message.text == text and message.reply_markup == reply_markup:
                return True
                
            await message.edit_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode,
                disable_web_page_preview=True
            )
            return True
        except telegram.error.BadRequest as e:
            if "message is not modified" in str(e).lower():
                return True
            logger.warning(f"Bad request error: {e}")
            return False
        except telegram.error.RetryAfter as e:
            logger.warning(f"Rate limit. Retry after {e.retry_after} seconds")
            await asyncio.sleep(e.retry_after)
            return await self._safe_edit_message(message, text, reply_markup, parse_mode)
        except telegram.error.TelegramError as e:
            logger.error(f"Telegram API error: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return False
    

    async def error_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}", exc_info=True)
        
        try:
            if update.effective_message:
                await self._safe_send_message(
                    chat_id=update.effective_message.chat_id,
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
        #if not self.token or self.token == "8111740535:AAEzEBWQI0rFAdR4gjIGS2SghOOe7oN4L1U":
         #   raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")

        self.application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        self.application.add_error_handler(self.error_handler)

    async def run_async(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.initialize()
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            await self.application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            raise

    def run(self) -> None:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            #if not self.token or self.token == "8111740535:AAEzEBWQI0rFAdR4gjIGS2SghOOe7oN4L1U":
             #   logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
              #  return

            # –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è Jupyter/Colab
            try:
                import nest_asyncio
                nest_asyncio.apply()
                logger.info("‚úÖ nest_asyncio –ø—Ä–∏–º–µ–Ω–µ–Ω")
            except ImportError:
                logger.warning("‚ö†Ô∏è nest_asyncio –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–µ–¥–∞—Ö")

            asyncio.run(self.run_async())
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

async def main_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if Config.TOKEN == "8111740535:AAEzEBWQI0rFAdR4gjIGS2SghOOe7oN4L1U":
        logger.error("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ Config.TOKEN")
        return
    
    if not Config.CREDS_FILE:
        logger.error("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ Config.CREDS_FILE")
        return
    
    if not Config.SHEET_ID:
        logger.error("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID Google Sheets –≤ Config.SHEET_ID")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = ClinicBot(
        token=Config.TOKEN,
        creds_file=Config.CREDS_FILE,
        sheet_id=Config.SHEET_ID
    )
    
    await bot.run_async()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = ClinicBot(
        token=Config.TOKEN,
        creds_file=Config.CREDS_FILE,
        sheet_id=Config.SHEET_ID
    )
    bot.run()

import nest_asyncio
nest_asyncio.apply()

if __name__ == "__main__":
    main()
